# -*- coding: utf-8 -*-
"""Tarea_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s_9lTrrpVP82uGM7tXwsmgoW9NSp0RxD
"""

from numpy.core.function_base import linspace
import matplotlib.pyplot as plt
import numpy as np
import random  
from math import sqrt, tan

n = 15000
c = 0
for i in range(n):
  xc = random.random()
  yc = random.random()
  xp = random.random()
  while(0.25**2 - (xp-xc)**2)< 0:
    xp = random.random()

  yp = sqrt(0.25**2 - (xp-xc)**2) + yc
  p1 = [xc, yc]
  p2 = [xp, yp]
  x_values = [p1[0], p2[0]]
  y_values = [p1[1], p2[1]]
  if (0<xc<0.25 and 0<xp<0.25):
    plt.plot(x_values, y_values, color="red")
  elif(0.25<xc<0.5 and 0.25<xp<0.5):
    plt.plot(x_values, y_values, color="red")
  elif(0.5<xc<0.75 and 0.5<xp<0.75):
    plt.plot(x_values, y_values, color="red")
  elif(0.75<xc<1 and 0.75<xp<1):
    plt.plot(x_values, y_values, color="red")
  else:
    plt.plot(x_values, y_values, color="blue")
    c = c+1

print((2*n)/c, c) 
plt.axvline(x=0.0, color = "black")
plt.axvline(x=0.25, color = "black")
plt.axvline(x=0.5, color = "black")
plt.axvline(x=0.75, color = "black")
plt.axvline(x=1, color = "black")

from numpy.core.function_base import linspace
import matplotlib.pyplot as plt
import numpy as np
import random  
from math import sqrt, tan

n = 150
c = 0
for i in range(n):
  xc = random.random()
  yc = random.random()
  xp = random.random()
  while(0.1**2 - (xp-xc)**2)< 0:
    xp = random.random()

  yp = sqrt(0.1**2 - (xp-xc)**2) + yc
  p1 = [xc, yc]
  p2 = [xp, yp]
  x_values = [p1[0], p2[0]]
  y_values = [p1[1], p2[1]]
  if (0<xc<0.1 and 0<xp<0.1):
    plt.plot(x_values, y_values, color="red")
  elif(0.1<xc<0.2 and 0.1<xp<0.2):
    plt.plot(x_values, y_values, color="red")
  elif(0.2<xc<0.3 and 0.2<xp<0.3):
    plt.plot(x_values, y_values, color="red")
  elif(0.3<xc<0.4 and 0.3<xp<0.4):
    plt.plot(x_values, y_values, color="red")
  elif(0.4<xc<0.5 and 0.4<xp<0.5):
    plt.plot(x_values, y_values, color="red")
  elif(0.5<xc<0.6 and 0.5<xp<0.6):
    plt.plot(x_values, y_values, color="red")
  elif(0.6<xc<0.7 and 0.6<xp<0.7):
    plt.plot(x_values, y_values, color="red")
  elif(0.7<xc<0.8 and 0.7<xp<0.8):
    plt.plot(x_values, y_values, color="red")
  elif(0.8<xc<0.9 and 0.8<xp<0.9):
    plt.plot(x_values, y_values, color="red")
  elif(0.9<xc<1 and 0.9<xp<1):
    plt.plot(x_values, y_values, color="red")
  else:
    plt.plot(x_values, y_values, color="blue")
    c = c+1

print((2*n)/c, c) 
plt.axvline(x=0.0, color = "black")
plt.axvline(x=0.1, color = "black")
plt.axvline(x=0.2, color = "black")
plt.axvline(x=0.3, color = "black")
plt.axvline(x=0.4, color = "black")
plt.axvline(x=0.5, color = "black")
plt.axvline(x=0.6, color = "black")
plt.axvline(x=0.7, color = "black")
plt.axvline(x=0.8, color = "black")
plt.axvline(x=0.9, color = "black")
plt.axvline(x=1, color = "black")

from numpy.core.function_base import linspace
import matplotlib.pyplot as plt
import numpy as np
import random  
from math import sqrt, tan

n = 15000
c = 0
for i in range(n):
  xc = random.random()
  yc = random.random()
  xp = random.random()
  while(0.5**2 - (xp-xc)**2)< 0:
    xp = random.random()

  yp = sqrt(0.5**2 - (xp-xc)**2) + yc
  p1 = [xc, yc]
  p2 = [xp, yp]
  x_values = [p1[0], p2[0]]
  y_values = [p1[1], p2[1]]
  if (xc<0.5 and xp<0.5):
    plt.plot(x_values, y_values, color="red")
  elif(xc>0.5 and xp>0.5):
    plt.plot(x_values, y_values, color="red")
  else:
    plt.plot(x_values, y_values, color="blue")
    c = c+1

print((2*n)/c, c) 
plt.axvline(x=0.5, color = "black")

from numpy.core.function_base import linspace
import matplotlib.pyplot as plt
import numpy as np
import random  
from math import sqrt, sin, cos, pi

n = 15000
c = 0
for i in range(n):
  xc = random.random()
  yc = random.random()
  beta = random.uniform(0,2*pi)
  if 0<beta<(pi/2):
    xp = (0.5*sin(beta)) + xc
    yp = (0.5*cos(beta)) + yc
  elif (pi/2)<beta<pi:
    beta = beta-(pi/2)
    xp = -(0.5*sin(beta)) + xc
    yp = (0.5*cos(beta)) + yc
  elif (pi)<beta<(3*pi/2):
    beta = (3*pi/2) - beta
    xp = -(0.5*sin(beta)) + xc
    yp = -(0.5*cos(beta)) + yc
  else:
    beta = beta - (3*pi/2)
    xp = (0.5*sin(beta)) + xc
    yp = -(0.5*cos(beta)) + yc    
  p1 = [xc, yc]
  p2 = [xp, yp]
  x_values = [p1[0], p2[0]]
  y_values = [p1[1], p2[1]]
  if (xc<0.5 and xp<0.5):
    plt.plot(x_values, y_values, color="red")
  elif(xc>0.5 and xp>0.5):
    plt.plot(x_values, y_values, color="red")
  else:
    plt.plot(x_values, y_values, color="blue")
    c = c+1
print(p1, p2, beta)
print((2*n)/c, c) 
plt.axvline(x=0.5, color = "black")

from numpy.core.function_base import linspace
import matplotlib.pyplot as plt
import numpy as np
import random  
from math import sqrt, tan, exp

def fun(x):
  fx = exp(x+x**2)
  return fx
n = 10
suma = 0
x = np.linspace(-2,2,200)
y = np.exp(x+x**2)

for i in range(n):
  z = random.uniform(-2,2)
  suma = suma + fun(z)

print(4*suma/n)
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
ax.spines['left'].set_position('center')
ax.spines['bottom'].set_position('zero')
ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none')
plt.fill_between(x,y, color = "red")
plt.plot(x,y ,color ="black")
plt.show()